namespace :load do
  task :defaults do
    set :shoryuken_default_hooks, -> { true }

    set :shoryuken_pid,      -> { File.join(shared_path, 'tmp', 'pids', 'shoryuken.pid') }
    set :shoryuken_env,      -> { fetch(:rack_env, fetch(:rails_env, fetch(:stage))) }
    set :shoryuken_log,      -> { File.join(shared_path, 'log', 'shoryuken.log') }
    set :shoryuken_config,   -> { File.join(release_path, 'config', 'shoryuken.yml') }
    set :shoryuken_requires, -> { [] }
    set :shoryuken_queues,   -> { [] }
    set :shoryuken_options,  -> { '--rails' }
      
    set :shoryuken_role,     -> { :app }
    
    # Rbenv and RVM integration
    set :rbenv_map_bins, fetch(:rbenv_map_bins).to_a.concat(%w(shoryuken))
    set :rvm_map_bins, fetch(:rvm_map_bins).to_a.concat(%w(shoryuken))
  end
end

namespace :deploy do
  before :starting, :check_shoryuken_hooks do
    invoke 'shoryuken:add_default_hooks' if fetch(:shoryuken_default_hooks)
  end
  after :publishing, :restart_shoryuken do
    invoke 'shoryuken:restart' if fetch(:shoryuken_default_hooks)
  end
end

namespace :shoryuken do
  
  def pid_file_signal(pid_file, signal=nil, options={})
    args = ['kill', "-#{signal}", '$(', 'cat', pid_file, ')']
    args.delete_at(1) if args[1]=='-'
    if options[:quiet]
      args << '>/dev/null' << '2>&1'
      test(*args)
    else
      execute(*args)
    end
  end

  def pid_file_exists?(pid_file)
    test('[', '-f', pid_file, ']')
  end

  def pid_process_exists?(pid_file)
    pid_file_exists?(pid_file) and pid_file_signal(pid_file, '0', quiet: true)
  end
  
  task :add_default_hooks do
    after 'deploy:updated', 'shoryuken:stop'
    after 'deploy:reverted', 'shoryuken:stop'
    after 'deploy:published', 'shoryuken:start'
  end

  desc 'Stop the shoryuken process, gracefully'
  task :stop do
    on roles fetch(:shoryuken_role) do
      within release_path do
        pid_file = fetch(:shoryuken_pid)
        if pid_file_exists?(pid_file)
          pid_file_signal pid_file, 'USR1', quiet: true
          
          print 'Waiting for shoryuken to shutdown...'
          sleep 1 while pid_process_exists?(pid_file)
          execute :rm, '-f', pid_file
        end
      end
    end
    Rake::Task['shoryuken:stop'].reenable
  end
  
  desc 'Shutdown the shoryuken process, immediately'
  task :shutdown do
    on roles fetch(:shoryuken_role) do
      within release_path do
        pid_file = fetch(:shoryuken_pid)
        pid_file_signal pid_file if pid_file_exists?(pid_file)
      end
    end
  end

  desc 'Start the shoryuken process'
  task :start do
    on roles fetch(:shoryuken_role) do
      within release_path do
        pid_file = fetch(:shoryuken_pid)
        unless pid_process_exists?(pid_file)
          args = ['--daemon']
          args.push "--pidfile '#{pid_file}'"
          logfile = fetch(:shoryuken_log) and args.push "--logfile '#{logfile}'"
          config = fetch(:shoryuken_config) and args.push "--config '#{config}'"
          queues = Array(fetch(:shoryuken_queues)) and queues.each{|queue| args.push "--queue #{queue}" }
          reqs = Array(fetch(:shoryuken_requires)) and reqs.each{|req| args.push "--require #{req}" }
          options = fetch(:shoryuken_options) and args.push Array(options).join(' ')
          
          with rails_env: fetch(:shoryuken_env) do
            execute :bundle, :exec, :shoryuken, args.compact.join(' ')
          end
        end
      end
    end
  end

  desc 'Restart shoryuken'
  task :restart do
    invoke 'shoryuken:stop'
    invoke 'shoryuken:start'
  end
  
  desc 'Make the shoryuken process log detailed status information'
  task :log_status do
    on roles fetch(:shoryuken_role) do
      pid_file = fetch(:shoryuken_pid)
      pid_file_signal pid_file, 'TTIN' if pid_file_exists?(pid_file)
    end
  end
  
  desc 'Tail the shoryuken log forever'
  task :tail_log do
    on roles fetch(:shoryuken_role) do
      log_file = fetch(:shoryuken_log)
      execute :tail, '-f', log_file if test('[', '-f', log_file, ']')
    end
  end

  desc 'Tail ENV[number] lines of the shoryuken log'
  task :tail_log_lines do
    on roles fetch(:shoryuken_role) do
      log_file = fetch(:shoryuken_log)
      execute :tail, '-n', ENV.fetch('number',20).to_s, log_file if test('[', '-f', log_file, ']')
    end
  end
end
